import numpy as np 
from tensorflow.keras.datasets import mnist 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense 
from tensorflow.keras.utils import to_categorical 
# Load and preprocess MNIST dataset 
(X_train, y_train), (X_test, y_test) = mnist.load_data() 
X_train = X_train.reshape(-1, 28, 28, 1).astype('float32') / 255.0 
X_test = X_test.reshape(-1, 28, 28, 1).astype('float32') / 255.0 
y_train = to_categorical(y_train, 10) 
y_test = to_categorical(y_test, 10) 
# Build the model 
model = Sequential([ 
Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)), 
MaxPooling2D((2, 2)), 
Flatten(), 
Dense(64, activation='relu'), 
Dense(10, activation='softmax') 
]) 
# Compile and train the model 
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) 
model.fit(X_train, y_train, epochs=1) 
# Save the trained model 
model.save("mnist_model.keras") 
print("Model saved as 'mnist_model.keras'.") 
import numpy as np 
import matplotlib.pyplot as plt 
from tensorflow.keras.models import load_model 
from tensorflow.keras.datasets import mnist 
# Load data and model 
(_, _), (X_test, _) = mnist.load_data() 
X_test = X_test / 255.0  # Normalize 
model = load_model("mnist_model.keras") 
# Predict for a specific index 
index = int(input("Enter the index you want to predict: ")) 
plt.imshow(X_test[index]) 
plt.title("Selected Image") 
plt.axis("off") 
plt.show() 
prediction = np.argmax(model.predict(X_test[index].reshape(-1, 28, 28, 1))) 
print(f"Predicted Digit: {prediction}")
