import tensorflow as tf 
from tensorflow.keras import layers, models 
from tensorflow.keras.datasets import fashion_mnist 
from tensorflow.keras.utils import to_categorical 
import matplotlib.pyplot as plt 
import numpy as np 
# Load and preprocess the Fashion-MNIST dataset 
(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data() 
x_train, x_test = x_train / 255.0, x_test / 255.0 
x_train = x_train.reshape(-1, 28, 28, 1) 
x_test = x_test.reshape(-1, 28, 28, 1) 
y_train, y_test = to_categorical(y_train, 10), to_categorical(y_test, 10) 
# Build the LeNet-5 model 
model = models.Sequential([ 
layers.Conv2D(6, (5, 5), activation='tanh', input_shape=(28, 28, 1)), 
layers.AvgPool2D((2, 2)), 
layers.Conv2D(16, (5, 5), activation='tanh'), 
layers.AvgPool2D((2, 2)), 
layers.Flatten(), 
layers.Dense(120, activation='tanh'), 
layers.Dense(84, activation='tanh'), 
layers.Dense(10, activation='softmax') 
]) 
# Compile and train the model 
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) 
model.fit(x_train, y_train, epochs=5, batch_size=64, validation_data=(x_test, y_test)) 
# Display a sample image from the test set 
plt.imshow(x_test[0].reshape(28, 28), cmap='gray') 
plt.title(f"True label: {np.argmax(y_test[0])}") 
plt.show() 
# Make a prediction 
prediction = model.predict(x_test[0].reshape(1, 28, 28, 1)) 
predicted_label = np.argmax(prediction) 
# Display the predicted label 
print(f"Predicted label: {predicted_label}")
