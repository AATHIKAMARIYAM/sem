import pandas as pd
import numpy as np
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
# Removed import matplotlib.pyplot as plt

# Load the California Housing dataset
housing = fetch_california_housing()
data = pd.DataFrame(housing.data, columns=housing.feature_names)
data["MEDV"] = housing.target

# Selecting 'MEDV' (median house value) as the feature to predict 'HouseAge'
X = data[['MEDV']]  # Feature is now 'MEDV'
y = data['HouseAge']  # Target is now 'HouseAge'

# Normalize the data
scaler_X = StandardScaler()
scaler_y = StandardScaler()
X = scaler_X.fit_transform(X)
y = scaler_y.fit_transform(y.values.reshape(-1, 1))

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the model
model = Sequential([
    Dense(10, activation='relu', input_shape=(X.shape[1],)),
    Dense(1)
])

# Compile and train the model
model.compile(optimizer='adam', loss='mse')
history = model.fit(X_train, y_train, epochs=10, verbose=1)

# Evaluate the model
y_pred = model.predict(X_test)

# Print metrics
print(f"MSE: {mean_squared_error(y_test, y_pred):.2f}")
print(f"MAE: {mean_absolute_error(y_test, y_pred):.2f}")
print(f"RÂ²: {r2_score(y_test, y_pred):.2f}")

# User input prediction
user_in = float(input("Enter the median house value: "))
predicted_age = scaler_y.inverse_transform(model.predict(scaler_X.transform([[user_in]])))[0][0]
print(f"Predicted HouseAge for median house value {user_in}: {predicted_age:.2f}")
